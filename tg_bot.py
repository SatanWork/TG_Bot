import os
import json
import telebot
import gspread
import matplotlib.pyplot as plt
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials
from io import BytesIO
import re
import time
import traceback  # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫

USERS_FILE = os.path.join(os.getcwd(), "users.json")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ (–±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏)
def load_users():
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, "r") as file:
                users = json.load(file)
                print(f"üîç –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
                return users
        except (json.JSONDecodeError, FileNotFoundError) as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ users.json: {e}")
            return {}
    else:
        print("‚ùå –§–∞–π–ª users.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –û–î–ò–ù –†–ê–ó –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
registered_users = load_users()

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def is_user_registered(user_id):
    return str(user_id) in registered_users

# üîë –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
print("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets...")
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = os.getenv("GOOGLE_CREDENTIALS")

if not creds_json:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: GOOGLE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

creds_dict = json.loads(creds_json)
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

spreadsheet_id = "1DpbYJ5f6zdhIl1zDtn6Z3aCHZRDFTaqhsCrkzNM9Iqo"
log_sheet = client.open_by_key(spreadsheet_id).worksheet("Changes Log")

# üîµ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

ADMIN_ID = 929686990  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏

# üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler(commands=["users"])
def list_users(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not registered_users:
        bot.reply_to(message, "‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2
    def escape_markdown(text):
        return re.sub(r"([_*\[\]()~`>#\+\-=|{}.!])", r"\\\1", text)

    user_list = "\n".join([f"üîπ {escape_markdown(username)}" for username in registered_users.values()])
    bot.reply_to(message, f"üìú *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n{user_list}", parse_mode="MarkdownV2")

# ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=["adduser"])
def add_user(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()
    if len(args) != 2:
        bot.reply_to(message, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adduser @username", parse_mode="Markdown")
        return

    username = args[1].strip("@")
    user_id = str(message.chat.id)

    registered_users[user_id] = username
    save_users(registered_users)

    bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.")

# ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=["removeuser"])
def remove_user(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()
    if len(args) != 2:
        bot.reply_to(message, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeuser @username", parse_mode="Markdown")
        return

    username = args[1].strip("@")
    
    user_id_to_remove = None
    for user_id, stored_username in registered_users.items():
        if stored_username == username:
            user_id_to_remove = user_id
            break

    if user_id_to_remove:
        del registered_users[user_id_to_remove]
        save_users(registered_users)
        bot.reply_to(message, f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–¥–∞–ª—ë–Ω.")
    else:
        bot.reply_to(message, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# üìÖ –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
def parse_date(date_str):
    try:
        return datetime.strptime(date_str, "%d-%m-%Y").strftime("%Y-%m-%d")
    except ValueError:
        return None

# üìä –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_statistics(start_date, end_date):
    all_logs = log_sheet.get_all_values()[1:]
    stats = {
        "–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è": 0,
        "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ —Å—Ç–æ—Ä–µ": 0,
        "–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": 0,
        "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ —Å—Ç–æ—Ä": 0
    }

    for row in all_logs:
        if len(row) >= 2:
            log_date, log_type = row[0], row[1]
            if start_date <= log_date <= end_date and log_type in stats:
                stats[log_type] += 1

    return stats

# üé® –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
def generate_pie_chart(stats):
    labels, sizes, colors = [], [], []
    color_map = {
        "–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è": "red",
        "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ —Å—Ç–æ—Ä–µ": "green",
        "–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": "blue",
        "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ —Å—Ç–æ—Ä": "yellow"
    }

    for category, count in stats.items():
        if count > 0:
            labels.append(f"{category} ({count})")
            sizes.append(count)
            colors.append(color_map.get(category, "gray"))

    plt.figure(figsize=(8, 6))
    plt.pie(sizes, labels=labels, colors=colors, autopct="%1.1f%%", startangle=140, wedgeprops={'edgecolor': 'white'})
    plt.gca().add_artist(plt.Circle((0, 0), 0.5, color="white"))
    plt.title("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–æ—Ä–µ")

    buf = BytesIO()
    plt.savefig(buf, format="png")
    plt.close()
    buf.seek(0)
    return buf

# ü§ñ –ö–æ–º–∞–Ω–¥–∞ /stats
@bot.message_handler(commands=["stats"])
def send_stats(message):
    user_id = str(message.from_user.id)

    if not is_user_registered(user_id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return

    try:
        args = message.text.split()
        if len(args) != 3:
            bot.reply_to(message, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stats DD-MM-YYYY DD-MM-YYYY\nüìå –ü—Ä–∏–º–µ—Ä: /stats 01-03-2024 07-03-2024", parse_mode="Markdown")
            return

        start_date = parse_date(args[1])
        end_date = parse_date(args[2])

        if not start_date or not end_date:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DD-MM-YYYY.", parse_mode="Markdown")
            return

        stats = get_statistics(start_date, end_date)  # üí° –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Google Sheets

        if sum(stats.values()) == 0:
            bot.reply_to(message, f"‚ÑπÔ∏è –ó–∞ –ø–µ—Ä–∏–æ–¥ {args[1]} - {args[2]} –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode="Markdown")
            return

        bot.reply_to(message, f"‚úÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}...")

        # üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        chart = generate_pie_chart(stats)
        bot.send_photo(message.chat.id, chart, caption=f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ {args[1]} - {args[2]}")

        # üìÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = "\n".join([f"üîπ *{key}*: {value}" for key, value in stats.items()])
        bot.send_message(message.chat.id, f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π:*\n{stats_text}", parse_mode="Markdown")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        


# üöÄ **–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞**
def start_bot():
    try:
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        bot.polling(none_stop=True, timeout=120, long_polling_timeout=100)
    except Exception as e:
        error_message = f"‚ö†Ô∏è –ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π:\n```{traceback.format_exc()}```"
        print(error_message)

        # üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –ø–∞–¥–µ–Ω–∏–∏ –±–æ—Ç–∞
        try:
            bot.send_message(ADMIN_ID, error_message, parse_mode="Markdown")
        except:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É.")

        exit(1)  # ‚ùå –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —á—Ç–æ–±—ã Render –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

# üöÄ **–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞**
start_bot()
