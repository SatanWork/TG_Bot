import os
import json
import telebot
import gspread
import matplotlib.pyplot as plt
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials
from io import BytesIO
import re
import time
import traceback  # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫

USERS_FILE = os.path.join(os.getcwd(), "users.json")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ (–±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏)
def load_users():
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, "r") as file:
                users = json.load(file)
                print(f"üîç –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
                return users
        except (json.JSONDecodeError, FileNotFoundError) as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ users.json: {e}")
            return {}
    else:
        print("‚ùå –§–∞–π–ª users.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –û–î–ò–ù –†–ê–ó –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
registered_users = load_users()

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def is_user_registered(user_id):
    return str(user_id) in registered_users

# üîë –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
print("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets...")
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = os.getenv("GOOGLE_CREDENTIALS")

if not creds_json:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: GOOGLE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

creds_dict = json.loads(creds_json)
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

spreadsheet_id = "1DpbYJ5f6zdhIl1zDtn6Z3aCHZRDFTaqhsCrkzNM9Iqo"
log_sheet = client.open_by_key(spreadsheet_id).worksheet("Changes Log")

# üîµ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

ADMIN_ID = 929686990  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏

# üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler(commands=["users"])
def list_users(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not registered_users:
        bot.reply_to(message, "‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2
    def escape_markdown(text):
        return re.sub(r"([_*\[\]()~`>#\+\-=|{}.!])", r"\\\1", text)

    user_list = "\n".join([f"üîπ {escape_markdown(username)}" for username in registered_users.values()])
    bot.reply_to(message, f"üìú *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n{user_list}", parse_mode="MarkdownV2")

# üöÄ **–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞**
def start_bot():
    try:
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        bot.polling(none_stop=True, timeout=60, long_polling_timeout=30)
    except Exception as e:
        error_message = f"‚ö†Ô∏è –ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π:\n```{traceback.format_exc()}```"
        print(error_message)

        # üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –ø–∞–¥–µ–Ω–∏–∏ –±–æ—Ç–∞
        try:
            bot.send_message(ADMIN_ID, error_message, parse_mode="Markdown")
        except:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É.")

        exit(1)  # ‚ùå –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —á—Ç–æ–±—ã Render –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

# üöÄ **–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞**
start_bot()
